{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GitGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,mCACI,sBAAMC,SAVO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBU,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,e,+BCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAMV,EAAW,EAAXA,IACjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAIA,QCDHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAItB,ECNwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAY,WACRJ,EAAU,CACNf,KAAMkB,EACNL,SAAS,MAEd,UAGZ,CAACpB,IAEGqB,EDhB2BM,CAAc3B,GAAlCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAOtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEvBzBiB,EAAe,WAKxB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAOA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCtBlC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.af9c1736.chunk.js","sourcesContent":["import React, {useState} from 'react';\n//import PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if( inputValue.trim().length > 2){\n            setCategories( cats => [ inputValue, ...cats, ] );\n            setInputValue('');\n        }        \n    }\n\n    return (\n        <>\n            <form onSubmit={ handleSubmit }>\n                <input\n                    type=\"text\"\n                    value={ inputValue }\n                    onChange={ handleInputChange }           \n                />\n           </form>\n        </>\n    )\n}\n\n// AddCategory.propTypes = {\n//    setCategories: PropTypes.func.required\n// }\n","\nexport const getGifs = async( category ) =>{\n    \n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=dS4MKkpayL8YlT6FLzaKcZaKZoaVzZWk`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n    \n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { title,url } ) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GitGrid = ({ category }) => {\n\n    // const [images, setImages] = useState([]);\n\n    const { data: images, loading } = useFetchGifs( category );\n\n    // useEffect( () => {\n    //     getGifs( category )\n    //         .then ( setImages );\n    // }, [ category ])\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n            <div className=\"card-grid\">\n\n                {\n                    images.map( img  => (\n                        <GifGridItem\n                            key={ img.id }\n                            { ...img }\n                        /> \n                    ))\n                }\n\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        \n        getGifs( category )\n            .then( imgs => {\n\n                setTimeout( () => {\n                    setState( {                    \n                        data: imgs,\n                        loading: false                    \n                    } );\n                }, 3000);\n            })\n\n    }, [category])\n\n    return state;\n\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GitGrid } from './components/GitGrid';\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['a', 'b', 'c', 'd'];\n    //const [categories, setCategories] = useState(['a', 'b', 'c', 'd'])\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     setCategories( [...categories, 'test'] );\n    //     //setCategories( cats => [...categories, 'test'] );\n    // }\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={ setCategories } />\n\n            <hr />\n\n            <ol>\n                {\n                    categories.map( category  => (\n                        <GitGrid \n                            key={ category }\n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n//rafc para crear el init","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}